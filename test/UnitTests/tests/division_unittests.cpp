#include "pch.h"

using namespace sbn;

class DivisionUnittests : public BaseTestWithRandomGenerator< uint64_t >
{
public:
    DivisionUnittests() : BaseTestWithRandomGenerator( 0, 0xFFFFFFFFFFFFFFFF ) {}

    void performDivisionTest( const std::string& numberStr, const std::string& dividendStr, const std::string wantedResult )
    {
        SimpleBigNum number;
        number.FromString( numberStr );
        SimpleBigNum divident;
        divident.FromString( dividendStr );
        number /= divident;
        // Compared against https://www.calculator.net/big-number-calculator.html
        ASSERT_EQ( number.ToString( true ), wantedResult );
    }
};

TEST_F( DivisionUnittests, division_by_one_should_always_give_same_number )
{
    SimpleBigNum one( 1 );
    SimpleBigNum wanted( GetNextRandomNumber() );
    SimpleBigNum divied = wanted;
    divied /= one;
    ASSERT_TRUE( divied == wanted );
}

TEST_F( DivisionUnittests, division_test_1 )
{
    performDivisionTest(
        "435423543864086542768542640267249806248962769802764980267"
        "208962786092768490678067249672086278695528657548682869767"
        "656427583685754765386765765386537653868653865386876876978"
        "765376538686865868653865868756386536427575427542754275426"
        "542754275427542754247658653742642765876754665879878656243"
        "65482172765869748636542652763586562476586374261753868653"
        ,
        "3416427653985465428653987987865748749767624645763587686"
        "5742642536542724754724754274273568542736586372765853"
        ,
        "1,274,499,529,811,905,020,960,802,789,362,763,931,076,057,018,440,871,789,"
        "617,515,272,914,984,119,885,213,659,858,252,927,565,648,043,720,694,900,710,"
        "376,798,491,378,543,554,685,920,122,410,782,857,486,449,656,322,061,518,892,"
        "569,606,759,868,074,227,050,098,826,405,380,993,823,809,589,567,238,223,311,"
        "456,602,331"
    );
}

TEST_F( DivisionUnittests, division_test_2 )
{
    performDivisionTest(
        "4438091674396854176464164301047135437056347056340715634170534"
        "6570316534980154637056341043615430156041356170563470541305463"
        "7435430546430643947381054735849315734015743180437548649547391"
        "5647830167348105437150643179046584793106413706543187540315437"
        "1085431563471056431705643170643701564301754017564310754617046"
        "3570413643109563410756341580341653470815634104315734016534017"
        "5634170513653401956134705634053461953418504361054637409136513"
        "4056341056341054361054361053415643107563410956349151346904438"
        "0916743968541764641643010471354370563470563407156341705346570"
        "3165349801546370563410436154301560413561705634705413054637435"
        "4305464306439473810547358493157340157431804375486495473915647"
        "8301673481054371506431790465847931064137065431875403154371085"
        "4315634710564317056431706437015643017540175643107546170463570"
        "4136431095634107563415803416534708156341043157340165340175634"
        "1705136534019561347056340534619534185043610546374091365134056"
        "3410563410543610543610534156431075634109563491513469044380916"
        "74396854176464164301047"
        ,
        "4895346153470164890136483190645743165479316459323754319543169"
        "5164379564375934615134798564379854316513798563197856431958431"
        "65784301965134798543789156139785634879531895613"
        ,
        "90,659,404,570,416,810,044,265,613,050,772,703,930,299,414,663,052,"
        "293,945,545,997,394,567,477,637,123,880,164,363,424,474,628,366,817,"
        "553,102,750,683,402,498,126,067,649,591,857,653,107,189,479,390,848,"
        "710,892,697,817,803,901,642,549,512,516,310,890,149,847,508,464,435,"
        "610,918,703,144,609,477,967,581,539,620,323,798,623,354,778,112,407,"
        "576,985,616,394,605,534,124,719,159,347,921,040,682,896,843,816,900,"
        "005,964,806,869,528,572,505,221,786,325,025,653,688,844,891,676,455,"
        "759,598,853,950,172,466,072,720,122,918,653,958,258,642,610,138,343,"
        "390,393,965,755,763,453,087,043,045,888,639,399,731,791,292,333,087,"
        "576,507,779,536,295,582,438,180,516,658,084,411,639,575,746,556,805,"
        "523,689,442,234,802,771,158,237,588,123,972,458,024,214,097,322,618,"
        "919,249,604,093,332,652,606,457,397,488,840,395,236,201,423,671,793,"
        "510,891,327,081,922,071,606,380,985,274,965,674,884,410,723,671,871,"
        "957,737,980,428,986,211,189,164,074,402,367,317,339,035,810,609,033,"
        "508,934,825,732,922,605,258,404,324,510,769,432,297,280,262,907,696,"
        "486,483,607,800,167,149,831,047,687,649,635,544,169,194,985,003,366,"
        "621,252,974,373,067"
    );
}

TEST_F( DivisionUnittests, division_test_3 )
{
    performDivisionTest(
        "9945438752834626048106734806437164309816470295802467598024624"
        "9806542654265427652893563272545427825865286258625652524316483"
        "1906543910649016419806481041786901467498016549842436323647542"
        "7413699999999999999999999999999999999999999999999999999999999"
        "9999999999999999999999999999994375427542856248548548652865284"
        "2852762865284286284286539879899999999999999999999999999999999"
        "9999999999999965765386538369945438752834626048106734806437164"
        "3098164702958024675980246249806542654265427652893563272545427"
        "8258652862586256525243164831906543910649016419806481041786901"
        "4674980165498424363236475427413699999999999999999999999999999"
        "9999999999999999999999999999999999999999999999999999999994375"
        "4275428562485485486528652842852762865284286284286539879899999"
        "9999999999999999999999999999999999999999965765386538369945438"
        "7528346260481067348064371643098164702958024675980246249806542"
        "6542654276528935632725454278258652862586256525243164831906543"
        "9106490164198064810417869014674980165498424363236475427413699"
        "99999999999999999999999"
        ,
        "9672048648926042789502464892684092758607489167489664964646525"
        "2876926418147659768652751454642641307564135714316501760156170"
        "5643183756137854317856431875648031534618574316548315634081561"
        "3485641854613546170854615780341653478015634780156347810543137"
        "1837471578038475731803745674381008356470135617838834857437475"
        "6473103838388838383564378374563178054333333354378534618754635"
        "8734150437180543701547301547311111111111111111154370156473815"
        "4637805554357348053415473150841573615743806018731738378137837"
        "3563473475086347853467850436108767341543133154313456806780678"
        "0564780544735461304359843159631563415973415168948315634915634"
        "9856341857934169543915643198543165798431536431549543689565315"
        "6031564318075643108756341085634105431653478015643103610564310"
        "6543018653178056108756138056310506340817563410506341563487056"
        "3056431087546305634543656140356430536153481054630546315045405"
        "6134056085361054316504658043156410563480156435603156340154603"
        "1564301564081356405618056430853460815640813563480156340854661"
        "4647431506340185641308"
        ,
        "10"
    );
}

TEST_F( DivisionUnittests, divisions_stochastic_test )
{
    for( uint32_t i = 0; i < 10000; ++i )
    {
        const auto value1 = GetNextRandomNumber();
        const auto value2 = ( GetNextRandomNumber() % 0xFFFFFFFFFFll );
        const auto mult = value1 / value2;
        sbn::SimpleBigNum bigNumber( value1 );
        bigNumber /= value2;

        ASSERT_EQ( bigNumber.ToString(), std::to_string( mult ) );
    }
}