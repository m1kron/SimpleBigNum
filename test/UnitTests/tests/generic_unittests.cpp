#include "pch.h"

TEST( GenericUnittests, golden_ratio )
{
    // Golden ratio can be approximatd by dividing two consequtive numbers of Fibonacci sequence.
    auto prev1 = sbn::SimpleBigNum( 1 );
    auto prev2 = sbn::SimpleBigNum( 1 );
    auto temp = sbn::SimpleBigNum( 0 );
    for( uint32_t i = 0; i < 10000; ++i )
    {
        temp = prev2;
        prev2 += prev1;
        prev1 = temp;
    }

    // Calculate golden ration with high precision: ( with 54 digits of precision in base 10 ).
    prev2 *= 1000000000000000000ll;
    prev2 *= 1000000000000000000ll;
    prev2 *= 1000000000000000000ll;
    prev2 /= prev1;

    // Golden ratio taken from https://oeis.org
    ASSERT_EQ( prev2.ToString(), "1618033988749894848204586834365638117720309179805762862" );
}

TEST( GenericUnittests, arithmetic_series )
{
    const uint64_t elements = 10000000;
    sbn::SimpleBigNum arithmeticSeriesSum;

    for( uint64_t i = 1; i < elements+1; ++i )
        arithmeticSeriesSum += sbn::SimpleBigNum( i );

    sbn::SimpleBigNum quickSum( elements );
    quickSum *= quickSum;
    quickSum += elements;
    quickSum /= 2;

    ASSERT_EQ( quickSum, arithmeticSeriesSum );
}

TEST( GenericUnittests, e_estimation )
{
    sbn::SimpleBigNum precision( 1000000000000000000ll );
    precision *= precision;
    precision *= precision;
    precision *= precision;

    sbn::SimpleBigNum eApproximation( precision );
    sbn::SimpleBigNum factorial( 1 );

    for( uint64_t i = 1; i < 1000; ++i )
    {
        factorial *= i;

        sbn::SimpleBigNum temp = precision;
        temp /= factorial;

        eApproximation += temp;
    }

    // e constant taken from https://oeis.org
    const std::string wanted = "271828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746";
    auto estimated = eApproximation.ToString();
    estimated.resize( wanted.size() );
    ASSERT_EQ( estimated, wanted );
}

TEST( GenericUnittests, fibonacci_modified )
{
    // Inspired by Hackerrank "Fibonacci modified" problem.

    auto prev1 = sbn::SimpleBigNum( 2 );
    auto prev2 = sbn::SimpleBigNum( 2 );
    auto temp = sbn::SimpleBigNum( 0 );
    for( uint32_t i = 2; i < 15; ++i )
    {
        temp = prev2;
        prev2 *=( prev2 );
        prev2 +=( prev1 );
        std::swap( prev1, temp );
    }

    ASSERT_EQ( prev2.ToString(), 
        "17573292566752439237899087063927707847866750144662054781384124578611827482524453"
        "34276829689067184961772452672539182519776970018441545703728764943804716080333071"
        "97799935768645222574952043886807207737029675275933662881965862645011982946027130"
        "73207719059666104443166329026654057785686923584218223465152975616886158261399000"
        "05148232393566635450910503069280558885776974441724647575506917705233033126440427"
        "94319293303129566727037980282267845167787347656287809035138475632375293426648370"
        "43294949139017770778184542471151692387102385118971279401752695636097049338917228"
        "51527311586200728158589834781233640705178754148388193984881072020460897836844013"
        "42402139848623181102693778802720527731851236774028557021430842222121804505254698"
        "24259482679231002082118774852472740636765842452119923091990939437708482287561154"
        "54877811574170055710239820307647236063102551089331022551145970246161572934923563"
        "78889114019661134828989183658440711836661542990278784241421670587990972484242731"
        "10436585857867939858547107043884686947054474533618402220428728040820336053873047"
        "20820709511700612993894438037088258748378144829151759966134438587801239685060481"
        "28784704109886082715620526621998852860636124860573197739345533651484190412656991"
        "75805522216154454407079442596575373166636334677754556871764197843081098624036816"
        "15390768827522514226515170779952877302260447965619385075559481038156202380824747"
        "91007995250946876487966527792644476278311117033416956429013377573111662441710362"
        "63324732608547068558367338922396053344030603257132131581984362354817329347838245"
        "22986791671298451630521298146256913521370293366146027041883164004813408024083418"
        "45381849683367867798968828636557870405346300328050677329048902502224543265800774"
        "93341704275943011734554545548962640103371339795331943784159795592057623716291247"
        "13048151826187726541330925435941196489866436262982965357963222011173783566578265"
        "15453704687908458620498228361543965402024520557591123234097834579607575950145361"
        "99806097577610079007822850036979613968550307598302275886727649017839141852551756"
        "33028864246597254753650709637838179816634761041341829682036923022647593659655086"
        "71457507412184646244406662065661840262258207822797097126313410262078554408987490"
        "12904762087760622741257536236954248371243090128897446716568788681854670409562788"
        "60994022654818422174510207086302834360129636807988365101221058491347089044016710"
        "77673764432160959530324757860422483456634606421108066025570674792386569946091617"
        "73439800768646852425475572877398559350883392240399015263441605258398599265148092"
        "54800796830793171231839585826664965370120348354863229472374580496122154405365502"
        "74887882541707386474225961124429114753612336031342897630973932151665188007300645"
        "70277778467404243527417838947962652993751103830460350618524287261468243086223714"
        "13505186282417715333922467949631807937584325292193182634981308081610405254624500"
        "91987743950231753526811397769741030322961212681995672922971299412110393646153685"
        "92170404172820354079381303088106281525114284420322220004460567359458224854161866"
        "24739508353046274177392584177836344015741284307726408895221078195326053694598171"
        "40440075332448118515289644187718277000465073331266220092658042926961800091782548"
        "63182597354583972014051796126298711430876296060577478064359879155901089639865701"
        "56087004776466078987255481357174321182" );
}